import math

def answer(seq):
    # Your code here
    pass

def new_node(v):
    return (v, None, None)

def insert_node(node, value):
    if node is None:
        return (value, None, None)
    (node_v, node_l, node_r) = node
    if value <= node_v:
        node_l = insert_node(node_l, value)
    else:
        node_r = insert_node(node_r, value)
    node = (node_v, node_l, node_r)
    return node

def print_tree(node, depth=0):
    if node is None:
        return
    (node_v, node_l, node_r) = node
    print ' ' * 2 * depth, node_v
    print_tree(node_l, depth + 1)
    print_tree(node_r, depth + 1)

def build_tree(values):
    node = None
    for v in values:
        node = insert_node(node, v)
    return node

def count_leaves(node):
    if node is None:
        return 0
    (node_v, node_l, node_r) = node
    return 1 + count_leaves(node_l) + count_leaves(node_r)

def count_insertion_orderings(node):
    if node is None:
        return 1
    (node_v, node_l, node_r) = node    
    count_l = count_leaves(node_l)
    count_r = count_leaves(node_r)
    nCr = math.factorial(count_l + count_r) / \
          (math.factorial(count_l) * math.factorial(count_r))
    return nCr * \
           count_insertion_orderings(node_l) * \
           count_insertion_orderings(node_r)

def test(values):
    n = build_tree(values)

    c = count_leaves(n)
    print c, "Leaves:"

    dups = count_insertion_orderings(n)
    print dups, "Duplicates produce same tree."

    print_tree(n)

if __name__ == '__main__':
    v1 = [5, 9, 8, 2, 1]
    v2 = [5, 2, 9, 1, 8]
    v3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    test(v1)
    test(v2)
    test(v3)
